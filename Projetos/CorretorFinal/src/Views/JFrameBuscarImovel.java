/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import DataAccesObject.BancoDAO;
import DataAccesObject.CompradorDAO;
import DataAccesObject.ImovelDAO;
import DataAccesObject.VendaEReservaDAO;
import Models.Banco;
import Models.Imovel;
//import Views.JFrameExcluirBanco;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author berna
 */
public class JFrameBuscarImovel extends javax.swing.JFrame {

    /**
     * Creates new form JFrameBuscarBanco
     */
    public JFrameBuscarImovel() {
        initComponents();
        listarImoveisTodos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonExcluir = new javax.swing.JButton();
        jTxtImovel = new javax.swing.JTextField();
        jButtonSair = new javax.swing.JButton();
        jLabelImovel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableImovel = new javax.swing.JTable();
        jButtonAlterar = new javax.swing.JButton();
        jButtonBuscar = new javax.swing.JButton();
        jButtonVender = new javax.swing.JButton();
        jButtonReservar = new javax.swing.JButton();
        jButtonCancReserva = new javax.swing.JButton();
        jButtonCancVenda = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonExcluir.setText("Excluir");
        jButtonExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExcluirActionPerformed(evt);
            }
        });

        jTxtImovel.setText("pesquisar pela descrição ");
        jTxtImovel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxtImovelActionPerformed(evt);
            }
        });
        jTxtImovel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxtImovelKeyPressed(evt);
            }
        });

        jButtonSair.setText("Sair");
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });

        jLabelImovel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelImovel.setText("Dados do Imovel");

        jTableImovel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Tipo", "Descrição", "Endereço", "Numero", "Bairro", "Cidade", "Estado", "Complemento", "Valor", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableImovel);

        jButtonAlterar.setText("Alterar");
        jButtonAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarActionPerformed(evt);
            }
        });

        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jButtonVender.setText("Vender");
        jButtonVender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVenderActionPerformed(evt);
            }
        });

        jButtonReservar.setText("Reservar");
        jButtonReservar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReservarActionPerformed(evt);
            }
        });

        jButtonCancReserva.setText("Cancelar Reserva");
        jButtonCancReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancReservaActionPerformed(evt);
            }
        });

        jButtonCancVenda.setText("Cancelar Venda");
        jButtonCancVenda.setActionCommand("Cancelar Venda");
        jButtonCancVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancVendaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAlterar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonVender)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonReservar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCancReserva)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonCancVenda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSair)
                        .addGap(24, 24, 24))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 863, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTxtImovel, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(364, 364, 364)
                .addComponent(jLabelImovel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabelImovel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTxtImovel)
                    .addComponent(jButtonBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonVender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAlterar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonReservar)
                        .addComponent(jButtonCancReserva)
                        .addComponent(jButtonCancVenda)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExcluirActionPerformed
       if (jTableImovel.getSelectedRow() >= 0) {
        int codigo = (int) jTableImovel.getValueAt(jTableImovel.getSelectedRow(), 0);
        int s = (int) jTableImovel.getValueAt(jTableImovel.getSelectedRow(), 10);
        if (s != 0) {
            JOptionPane.showMessageDialog(null, "Esse imóvel não pode ser excluído!");
        }

        if (s == 0) {
            int resposta = JOptionPane.showConfirmDialog(null, "Deseja realmente excluir?", "ALERTA", JOptionPane.YES_NO_OPTION);
            if (resposta == JOptionPane.YES_OPTION) {
                ImovelDAO imovel = new ImovelDAO();
                imovel.excluirImovel(codigo);
                JOptionPane.showMessageDialog(null, "Imovel excluído com sucesso");
            } else if (resposta == JOptionPane.NO_OPTION) {
                //Usuário clicou em não. Executar o código correspondente.
            }
            listarImoveisTodos();
            } else {
            JOptionPane.showMessageDialog(null, "Selecione um imovel e tente novamente");
        }
       }
    }//GEN-LAST:event_jButtonExcluirActionPerformed

    private void jTxtImovelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxtImovelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtImovelActionPerformed

    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonSairActionPerformed

    private void jTxtImovelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtImovelKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTxtImovelKeyPressed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        //table = (JTable)JTable.getModel();  
        //table.setNumRows(0);
        try {
            ImovelDAO imovel = new ImovelDAO();
            ArrayList<Imovel> imoveis = imovel.listarImovel(jTxtImovel.getText());
            DefaultTableModel limpar = (DefaultTableModel) jTableImovel.getModel();
            limpar.setNumRows(0);
            for (Imovel i : imoveis) {
                DefaultTableModel model = (DefaultTableModel) jTableImovel.getModel();
                Object linha[] = new Object[]{i.getCodigo(), i.getTipo(), i.getDescricao(), i.getEndereco(), i.getNumero(), i.getBairro(), i.getCidade(), i.getEstado(), i.getComplemento(), i.getValor(), i.getStatus()};
                model.addRow(linha);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao exibir bancos.");
        }

    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jButtonAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarActionPerformed
       if (jTableImovel.getSelectedRow() >= 0) {
        int codigo = (int) jTableImovel.getValueAt(jTableImovel.getSelectedRow(), 0);
        Imovel i = new Imovel();
        ImovelDAO imovel = new ImovelDAO();
        JFrameAlterarImovel alterarImovel = new JFrameAlterarImovel(imovel.imovelBuscarImovel(codigo));
        alterarImovel.show();
        listarImoveisTodos();
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um imovel e tente novamente");
        }
    }//GEN-LAST:event_jButtonAlterarActionPerformed

    private void jButtonVenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVenderActionPerformed
               if (jTableImovel.getSelectedRow() >= 0) {
        int codImovel = (int) jTableImovel.getValueAt(jTableImovel.getSelectedRow(), 0);
        int s = (int) jTableImovel.getValueAt(jTableImovel.getSelectedRow(), 10);
        if (s == 0) {
            ImovelDAO imovel = new ImovelDAO();
            JFrameVenderImovel vender = new JFrameVenderImovel(imovel.imovelBuscarImovel(codImovel));
            vender.show();
        }
        if (s == 1) {
            ImovelDAO imovel = new ImovelDAO();
            CompradorDAO comprador = new CompradorDAO();
            VendaEReservaDAO venda = new VendaEReservaDAO();
            int codComprador = venda.vendaComReserva(codImovel);
            System.out.println(codComprador);
            JFrameVenderImovelReservado vender = new JFrameVenderImovelReservado(imovel.imovelBuscarImovel(codImovel), comprador.compradorBuscarComprador(codComprador));
            vender.show();
        }
        if (s == 2) {
            JOptionPane.showMessageDialog(null, "Este imóvel está vendido");
        }
        listarImoveisTodos();
         } else {
            JOptionPane.showMessageDialog(null, "Selecione um imovel e tente novamente");
        }
    }//GEN-LAST:event_jButtonVenderActionPerformed

    private void jButtonReservarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReservarActionPerformed
        if (jTableImovel.getSelectedRow() >= 0) {
        int codigo = (int) jTableImovel.getValueAt(jTableImovel.getSelectedRow(), 0);
        int s = (int) jTableImovel.getValueAt(jTableImovel.getSelectedRow(), 10);
        if (s == 0) {
            ImovelDAO imovel = new ImovelDAO();
            JFrameReservarImovel reservar = new JFrameReservarImovel(imovel.imovelBuscarImovel(codigo));
            reservar.show();
            listarImoveisTodos();
        } else if (s == 1) {
            JOptionPane.showMessageDialog(null, "Este imóvel já está reservado");
        } else {
            JOptionPane.showMessageDialog(null, "Este imóvel não pode ser reservado pois está vendido");
        }
        listarImoveisTodos();
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um imovel e tente novamente");
        }
    }//GEN-LAST:event_jButtonReservarActionPerformed

    private void jButtonCancReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancReservaActionPerformed
          if (jTableImovel.getSelectedRow() >= 0) {
        int codigo = (int) jTableImovel.getValueAt(jTableImovel.getSelectedRow(), 0);
        int s = (int) jTableImovel.getValueAt(jTableImovel.getSelectedRow(), 10);
        if (s == 1) {
            int resposta = JOptionPane.showConfirmDialog(null, "Deseja realmente cancelcar a reserva?", "ALERTA", JOptionPane.YES_NO_OPTION);
            if (resposta == JOptionPane.YES_OPTION) {
                VendaEReservaDAO reserva = new VendaEReservaDAO();
                reserva.cancelarReserva(codigo);
                JOptionPane.showMessageDialog(null, "Reserva cancelcada com sucesso");
            } else if (resposta == JOptionPane.NO_OPTION) {
                //Usuário clicou em não. Executar o código correspondente.
            }
        } else if (s == 0) {
            JOptionPane.showMessageDialog(null, "Este imóvel não possui reserva");
        } else if (s == 2) {
            JOptionPane.showMessageDialog(null, "Este imóvel está vendido");
        } else {
            JOptionPane.showMessageDialog(null, "Erro inesperado cod: jButtonCancReserva");
        }
        listarImoveisTodos();
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um imovel e tente novamente");
        }
    }//GEN-LAST:event_jButtonCancReservaActionPerformed

    private void jButtonCancVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancVendaActionPerformed
          if (jTableImovel.getSelectedRow() >= 0) {
        int codigo = (int) jTableImovel.getValueAt(jTableImovel.getSelectedRow(), 0);
        int s = (int) jTableImovel.getValueAt(jTableImovel.getSelectedRow(), 10);
        if (s == 2) {
            int resposta = JOptionPane.showConfirmDialog(null, "Deseja realmente cancelcar a venda?", "ALERTA", JOptionPane.YES_NO_OPTION);
            if (resposta == JOptionPane.YES_OPTION) {
                VendaEReservaDAO venda = new VendaEReservaDAO();
                venda.cancelarVenda(codigo);
                JOptionPane.showMessageDialog(null, "Venda cancelcada com sucesso");
            } else if (resposta == JOptionPane.NO_OPTION) {
                //Usuário clicou em não. Executar o código correspondente.
            }
        } else if (s == 0) {
            JOptionPane.showMessageDialog(null, "Este imóvel não está vendido");
        } else if (s == 1) {
            JOptionPane.showMessageDialog(null, "Este imóvel está reservado");
        } else {
            JOptionPane.showMessageDialog(null, "Erro inesperado cod: jButtonCancVenda");
        }

        listarImoveisTodos();
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um imovel e tente novamente");
        }
    }//GEN-LAST:event_jButtonCancVendaActionPerformed

    private void listarImoveisTodos() {
        try {
            ImovelDAO imovel = new ImovelDAO();
            ArrayList<Imovel> imoveis = imovel.listarImovelTodos();
            DefaultTableModel limpar = (DefaultTableModel) jTableImovel.getModel();
            limpar.setNumRows(0);
            for (Imovel i : imoveis) {
                DefaultTableModel model = (DefaultTableModel) jTableImovel.getModel();
                Object linha[] = new Object[]{i.getCodigo(), i.getTipo(), i.getDescricao(), i.getEndereco(), i.getNumero(), i.getBairro(), i.getCidade(), i.getEstado(), i.getComplemento(), i.getValor(), i.getStatus()};
                model.addRow(linha);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao exibir bancos.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAlterar;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonCancReserva;
    private javax.swing.JButton jButtonCancVenda;
    private javax.swing.JButton jButtonExcluir;
    private javax.swing.JButton jButtonReservar;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JButton jButtonVender;
    private javax.swing.JLabel jLabelImovel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableImovel;
    private javax.swing.JTextField jTxtImovel;
    // End of variables declaration//GEN-END:variables
}
